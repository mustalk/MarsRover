# Android CI/CD Pipeline
#
# This workflow runs automated tests, code quality checks, and deployment for Android projects.
# It triggers on push events to development branches and PR events to main.
#
# Features:
# - Static code analysis (Detekt, KtLint)
# - Unit tests execution
# - UI tests with Android emulator
# - Debug APK generation
# - Automated deployment on main branch
# - Gradle caching for optimized build times
# - Automatic cancellation of previous runs for the same branch
#
# Secrets Required:
# - GRADLE_ENCRYPTION_KEY: Encryption key for Gradle cache (recommended for security)

name: Android CI/CD

on:
  push:
    branches: [ main, 'feat/**', 'chore/**', 'bugfix/**', 'test/**', 'refactor/**', 'hotfix/**' ]
  pull_request:
    branches: [ main ]

# Automatically cancel previous runs for the same branch
# Uses head ref (branch name) for both push and PR events to ensure proper cancellation
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
  android-test:
    # Skip Android tests for CI and documentation branches, as they typically don't include app code changes.
    if: |
      (github.event_name == 'push' && !startsWith(github.ref_name, 'ci/') && !startsWith(github.ref_name, 'docs/')) ||
      (github.event_name == 'pull_request' && !startsWith(github.head_ref, 'ci/') && !startsWith(github.head_ref, 'docs/'))
    runs-on: ubuntu-latest
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 15

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        # Documentation: Checks out the code for the workflow to execute
        # See: https://docs.github.com/en/actions/reference/actions#checkout

      # Check disk space before build
      - name: Check disk space before build
        run: df -h
        # Documentation: Checks available disk space to ensure sufficient space for build and test processes

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        # Documentation: Sets up JDK 17 for building and testing Java applications
        # See: https://docs.github.com/en/actions/language-and-framework-guides/using-java-with-github-actions

      # Grant execute permission to Gradlew
      - name: Grant Execute Permission to Gradlew
        run: chmod +x ./gradlew
        # Documentation: Grants execute permission to Gradlew script for Gradle build automation
        # See: https://docs.gradle.org/current/userguide/gradle_wrapper.html

      # Setup Gradle with caching
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          # Allow caching for all branches.
          # Write access to the cache is limited to 'main' branches, we do this to avoid feature branches from invalidating the existing cache.
          # This way we have faster builds on overall. Other branches have read-only access to the cache.
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
        # Documentation: Sets up Gradle wrapper with caching for faster builds
        # See: https://github.com/gradle/actions/blob/main/docs/setup-gradle.md

      # Log to check cache availability
      - name: Check Cache Status
        run: |
          if [ -d ~/.gradle/caches ]; then
            echo "Gradle cache exists"
          else
            echo "Gradle cache missing"
          fi

      # Performs static code analysis using Detekt and Ktlint
      - name: Run Code Analysis (Parallel)
        run: |
          ./gradlew detekt --stacktrace --parallel --configuration-cache &        # Run Detekt in the background (starts daemon)
          ./gradlew ktlintCheck --stacktrace --parallel --configuration-cache &   # Run ktlint check in the background (uses existing daemon)
          wait                                                                    # Wait for both processes to finish
        # Documentation: Runs Detekt and ktlint checks concurrently to analyze code quality and formatting
        # See: https://detekt.github.io/detekt/
        # See: https://github.com/pinterest/ktlint

      # Runs unit tests
      - name: Run Unit Tests
        run: ./gradlew test --configuration-cache
        # Documentation: Executes unit tests using Gradle for automated testing
        # See: https://docs.gradle.org/current/userguide/java_testing.html

      # Build debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug --configuration-cache
        # Documentation: Builds debug APK for testing and distribution
        # See: https://developer.android.com/studio/build/building-cmdline

      # Check disk space before emulator setup
      - name: Check disk space before emulator setup
        run: df -h

        # Delete unnecessary installed tools on the CI env
        #- name: Delete unnecessary tools
        #  uses: jlumbroso/free-disk-space@v1.3.1
        #  with:
        #    android: false # Don't remove Android tools
        #    tool-cache: true # Remove image tool cache - rm -rf "$AGENT_TOOLSDIRECTORY"
        #    dotnet: true # rm -rf /usr/share/dotnet
        #    haskell: true # rm -rf /opt/ghc...
        #    swap-storage: true # rm -f /mnt/swapfile (4GiB)
        #    docker-images: false # Takes 16s, enable if needed in the future
        #    large-packages: false # includes google-cloud-sdk and it's slow
        # Documentation: Commented out to save 40s ish build time. Frees 14GB but we have 34GB available which is sufficient.
        # Re-enable if disk space becomes an issue (< 10GB available).

      # Setup Android emulator for UI tests
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
        # Documentation: Enables Kernel-based Virtual Machine (KVM) for Android emulator acceleration
        # See: https://developer.android.com/studio/run/emulator-acceleration

      # Cache AVD (Android Virtual Device)
      - name: AVD Cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-api-35
        # Documentation: Caches Android Virtual Device (AVD) data to optimize emulator startup
        # See: https://developer.android.com/studio/run/managing-avds.html

      # Start emulator and run UI tests
      - name: Run UI Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          arch: x86_64
          force-avd-creation: false
          emulator-options: -snapshot avd-snapshot -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 4096
          disable-animations: true
          disk-size: 6000M # 6GB storage for emulator
          heap-size: 1024M # 1GB heap for app processes
          ram-size: 4096M # 4GB total RAM for emulator
          script: ./gradlew connectedCheck --configuration-cache
        # Documentation: Runs instrumented tests on an optimized Android emulator options setup
        # See: https://developer.android.com/training/testing/unit-testing/instrumented-unit-testing

      # Upload test reports and analysis results
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always() # Always upload even if the job fails
        with:
          name: test-reports-${{ github.run_id }}
          path: |
            app/build/reports/tests/
            app/build/reports/androidTests/connected/debug/
            app/build/reports/detekt/
            app/build/reports/ktlint/
        # Documentation: Uploads test reports as artifacts for analysis
        # See: https://github.com/actions/upload-artifact

      # Upload debug APK
      - name: Upload Debug APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.run_id }}
          path: app/build/outputs/apk/debug/*.apk
        # Documentation: Uploads debug APK as artifact for testing
        # See: https://github.com/actions/upload-artifact

  android-deploy:
    needs: android-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        # Documentation: Checks out the code with full history for git operations

      # Create a Github release and upload debug APK
      - name: Deploy to GitHub Releases
        uses: ./.github/actions/execute/android-deploy
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug-apk-artifact-name: debug-apk-${{ github.run_id }}
          apk-filename: mustalk-mars-rover-debug.apk
        # Documentation: Creates a Github Release and upload debug APK for testing and demo purposes.
