# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# JVM performance optimizations for build processes
# -Xmx4g: Maximum heap size of 4GB for large builds
# -Xms1g: Initial heap size of 1GB to reduce allocation overhead
# -XX:MetaspaceSize=512m: Initial metaspace size for class metadata
# -XX:MaxMetaspaceSize=1g: Maximum metaspace size to prevent OOM errors
# -XX:+HeapDumpOnOutOfMemoryError: Generate heap dump for debugging memory issues
org.gradle.jvmargs=-Xmx4g -Xms1g -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# Gradle build performance optimizations
# Enable parallel execution to utilize multiple CPU cores during builds
org.gradle.parallel=true
# Keep Gradle daemon running between builds for faster startup times
org.gradle.daemon=true
# Only configure projects that are needed for the current build
org.gradle.configureondemand=true

# Android build optimizations
# Use AndroidX library namespace instead of legacy support libraries
android.useAndroidX=true
# Enable automatic translation from legacy support libraries to AndroidX
android.enableJetifier=true
# Generate R classes containing only resources from the module itself (not dependencies)
# This reduces R class size and improves build performance
android.nonTransitiveRClass=true
# Allow resource IDs to be non-final for improved build performance in debug builds
android.nonFinalResIds=true

# Enable build caching to reuse outputs from previous builds
org.gradle.caching=true

# Kotlin code style configuration
# Use "official" Kotlin coding conventions for consistent formatting
kotlin.code.style=official

# Configuration cache optimizations
# Cache build configuration to speed up subsequent builds
org.gradle.configuration-cache=true
# Enable parallel execution within configuration cache for better performance
org.gradle.configuration-cache.parallel=true
